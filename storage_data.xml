<application>
  <component name="AppStorage">
    <histories>
      <item value="solr Dist Product Dao" />
      <item value="diverged" />
      <item value="ambiguous argument ' origin / dev ^{}': unknown revision or path not in the working tree ." />
      <item value="If you use Update , all specified information overwrites any existing information . Any unspecified information is erased ." />
      <item value="merchant Id" />
      <item value="Advice" />
      <item value="restrict" />
      <item value="params Map" />
      <item value="NEWLINE" />
      <item value="preserve Spacing" />
      <item value="is Prefix" />
      <item value="not present" />
      <item value="present" />
      <item value="认识" />
      <item value="不认识" />
      <item value="do Jd Platform Category Sub" />
      <item value="do Jd Platform Category Common" />
      <item value="Synchronous Queue" />
      <item value="lenient" />
      <item value="spurious" />
      <item value="Koala" />
      <item value="suspend" />
      <item value="suspend Coroutine" />
      <item value="underlying" />
      <item value="naughty" />
      <item value="test File System" />
      <item value="Exception" />
      <item value="is Read Only" />
      <item value="ROLE INFRASTRUCTURE" />
      <item value="enhancer" />
      <item value="Indicates" />
      <item value="elided" />
      <item value="locally" />
      <item value="subtype" />
      <item value="is Assignable From" />
      <item value="vms Bt Client Inventory Dao" />
      <item value="formula" />
      <item value="Quietly" />
      <item value="LOCATION NOT EMPTY" />
      <item value="affiliated" />
      <item value="If the transformer throws an exception ( which it doesn ' t catch ), subsequent transformers will still be called and the load , redefine or retransform will still be attempted ." />
      <item value="If the transformer throws an exception ( which it doesn ' t catch ), subsequent transformers will still be called and the load , redefine or retransform will still be attempted . Thus , throwing an exception has the same effect as returning &lt; code &gt; null &lt;/ code &gt;. To prevent unexpected behavior when unchecked exceptions are generated in transformer code , a transformer can catch &lt; code &gt; Throwable &lt;/ code &gt;. If the transformer believes the &lt; code &gt; class File Buffer &lt;/ code &gt; does not represent a validly formatted class file , it should throw an &lt; code &gt; Illegal Class Format Exception &lt;/ code &gt;; while this has the same effect as returning null . it facilitates the logging or debugging of format corruptions ." />
      <item value="The implementation of this method may transform the supplied class file and return a new replacement class file . &lt; P &gt; There are two kinds of transformers , determined by the &lt; code &gt; can Retransform &lt;/ code &gt; parameter of {@ link java . lang . instrument . Instrumentation # add Transformer ( Class File Transformer , boolean )}: &lt; ul &gt; &lt; li &gt;&lt; i &gt; retransformation capable &lt;/ i &gt; transformers that were added with &lt; code &gt; can Retransform &lt;/ code &gt; as true &lt;/ li &gt; &lt; li &gt;&lt; i &gt; retransformation incapable &lt;/ i &gt; transformers that were added with &lt; code &gt; can Retransform &lt;/ code &gt; as false or where added with {@ link java . lang . instrument . Instrumentation # add Transformer ( Class File Transformer )} &lt;/ li &gt; &lt;/ ul &gt; &lt; P &gt; Once a transformer has been registered with {@ link java . lang . instrument . Instrumentation # add Transformer ( Class File Transformer , boolean ) add Transformer }, the transformer will be called for every new class definition and every class redefinition . Retransformation capable transformers will also be called on every class retransformation . The request for a new class definition is made with {@ link java . lang . Class Loader # define Class Class Loader . define Class } or its native equivalents . The request for a class redefinition is made with {@ link java . lang . instrument . Instrumentation # redefine Classes Instrumentation . redefine Classes } or its native equivalents . The request for a class retransformation is made with {@ link java . lang . instrument . Instrumentation # retransform Classes Instrumentation . retransform Classes } or its native equivalents . The transformer is called during the processing of the request , before the class file bytes have been verified or applied . When there are multiple transformers , transformations are composed by chaining the &lt; code &gt; transform &lt;/ code &gt; calls . That is , the byte array returned by one call to &lt; code &gt; transform &lt;/ code &gt; becomes the input ( via the &lt; code &gt; classfile Buffer &lt;/ code &gt; parameter ) to the next call . &lt; P &gt; Transformations are applied in the following order : &lt; ul &gt; &lt; li &gt; Retransformation incapable transformers &lt;/ li &gt; &lt; li &gt; Retransformation incapable native transformers &lt;/ li &gt; &lt; li &gt; Retransformation capable transformers &lt;/ li &gt; &lt; li &gt; Retransformation capable native transformers &lt;/ li &gt; &lt;/ ul &gt; &lt; P &gt; For retransformations , the retransformation incapable transformers are not called , instead the result of the previous transformation is reused . In all other cases , this method is called . Within each of these groupings , transformers are called in the order registered . Native transformers are provided by the &lt; code &gt; Class File Load Hook &lt;/ code &gt; event in the Java Virtual Machine Tool Interface ). &lt; P &gt; The input ( via the &lt; code &gt; classfile Buffer &lt;/ code &gt; parameter ) to the first transformer is : &lt; ul &gt; &lt; li &gt; for new class definition , the bytes passed to &lt; code &gt; Class Loader . define Class &lt;/ code &gt; &lt;/ li &gt; &lt; li &gt; for class redefinition , &lt; code &gt; definitions . get Definition Class File ()&lt;/ code &gt; where &lt; code &gt; definitions &lt;/ code &gt; is the parameter to {@ link java . lang . instrument . Instrumentation # redefine Classes Instrumentation . redefine Classes } &lt;/ li &gt; &lt; li &gt; for class retransformation , the bytes passed to the new class definition or , if redefined , the last redefinition , with all transformations made by retransformation incapable transformers reapplied automatically and unaltered ; for details see {@ link java . lang . instrument . Instrumentation # retransform Classes Instrumentation . retransform Classes } &lt;/ li &gt; &lt;/ ul &gt; &lt; P &gt; If the implementing method determines that no transformations are needed , it should return &lt; code &gt; null &lt;/ code &gt;. Otherwise , it should create a new &lt; code &gt; byte []&lt;/ code &gt; array , copy the input &lt; code &gt; classfile Buffer &lt;/ code &gt; into it , along with all desired transformations , and return the new array . The input &lt; code &gt; classfile Buffer &lt;/ code &gt; must not be modified . &lt; P &gt; In the retransform and redefine cases , the transformer must support the redefinition semantics : if a class that the transformer changed during initial definition is later retransformed or redefined , the transformer must insure that the second class output class file is a legal redefinition of the first output class file . &lt; P &gt; If the transformer throws an exception ( which it doesn ' t catch ), subsequent transformers will still be called and the load , redefine or retransform will still be attempted . Thus , throwing an exception has the same effect as returning &lt; code &gt; null &lt;/ code &gt;. To prevent unexpected behavior when unchecked exceptions are generated in transformer code , a transformer can catch &lt; code &gt; Throwable &lt;/ code &gt;. If the transformer believes the &lt; code &gt; class File Buffer &lt;/ code &gt; does not represent a validly formatted class file , it should throw an &lt; code &gt; Illegal Class Format Exception &lt;/ code &gt;; while this has the same effect as returning null . it facilitates the logging or debugging of format corruptions . @ param loader the defining loader of the class to be transformed , may be &lt; code &gt; null &lt;/ code &gt; if the bootstrap loader @ param class Name the name of the class in the internal form of fully qualified class and interface names as defined in &lt; i &gt; The Java Virtual Machine Specification &lt;/ i &gt;. For example , &lt; code &gt;&quot; java / util / List &quot;&lt;/ code &gt;. @ param class Being Redefined if this is triggered by a redefine or retransform , the class being redefined or retransformed ; if this is a class load , &lt; code &gt; null &lt;/ code &gt; @ param protection Domain the protection domain of the class being defined or redefined @ param classfile Buffer the input byte buffer in class file format - must not be modified" />
      <item value="The implementation of this method may transform the supplied class file" />
      <item value="symmetric" />
      <item value="mechanism" />
      <item value="机制" />
      <item value="Documented" />
      <item value="Retention" />
      <item value="去除底层 bean 中不必要的依赖" />
    </histories>
  </component>
</application>